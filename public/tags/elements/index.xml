<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elements on Blog by sahli.net - Philip Sahli</title>
    <link>https://blog.sahli.net/tags/elements/</link>
    <description>Recent content in elements on Blog by sahli.net - Philip Sahli</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Jan 2019 12:17:01 +0200</lastBuildDate>
    
      <atom:link href="https://blog.sahli.net/tags/elements/index.xml" rel="self" type="application/rss+xml" />
    
    
      <item>
        <title>Gonsumidor</title>
        <link>https://blog.sahli.net/2019/01/06/gonsumidor/</link>
        <pubDate>Sun, 06 Jan 2019 12:17:01 +0200</pubDate>
        <guid>https://blog.sahli.net/2019/01/06/gonsumidor/</guid>
        <description>Gonsumidor
Zweck
Gonsumidor ist ein in Go implementierte Applikation, die den Counter-Service von Gontador verwendet. Als Protokoll wird gRPC (HTTP/2 bases RPC) verwendet. Somit braucht es zwei Implementationen:
 Erweiterung von Contador durch ein gRPC Server-Interface https://github.com/philipsahli/gontador/pull/2
 Erstellung von Gonsumidor als gRPC Client https://github.com/philipsahli/gonsumidor  Was kommt als nächstes
SSL: https://medium.com/pantomath/how-we-use-grpc-to-build-a-client-server-system-in-go-dd20045fa1c2</description>
      </item>
    
      <item>
        <title>Gontador</title>
        <link>https://blog.sahli.net/2019/01/06/gontador/</link>
        <pubDate>Sun, 06 Jan 2019 12:17:01 +0200</pubDate>
        <guid>https://blog.sahli.net/2019/01/06/gontador/</guid>
        <description>Gontador
An einem I2 Standortmeeting hat Laurent Bovet eindrücklich aufgezeigt, wie ein einfacher Service in NodeJs implementiert und für den Betrieb auf Openshift “fit” gemacht wird.
https://github.com/lbovet/contador
Contador ist ein Service, der bei jedem HTTP GET-Request in Redis einen Counter um 1 erhöht und der neue Wert in der HTTP-Response dem Client überträgt. Laurent hat verschiedene notwendige Aspekte in Commits implementiert.
 Logging mit TraceId https://github.com/lbovet/contador/commit/e7c4b282aa416ac9528ab324d810698354a9a3b1 Applikation muss auf ein SIGHUP reagieren und ein “graceful shutdown” machen.</description>
      </item>
    
      <item>
        <title>Goperador</title>
        <link>https://blog.sahli.net/2019/01/06/goperador/</link>
        <pubDate>Sun, 06 Jan 2019 12:17:01 +0200</pubDate>
        <guid>https://blog.sahli.net/2019/01/06/goperador/</guid>
        <description>Goperador
https://blog.openshift.com/introducing-the-operator-framework/
Neben Go operator gibt es auch Ansible und Helm operators.
Workflow
The following workflow is for a new Go operator: 1. Create a new operator project using the SDK Command Line Interface(CLI) 2. Define new resource APIs by adding Custom Resource Definitions(CRD) 3. Define Controllers to watch and reconcile resources 4. Write the reconciling logic for your Controller using the SDK and controller-runtime APIs 5. Use the SDK CLI to build and generate the operator deployment manifests</description>
      </item>
    
  </channel>
</rss>
